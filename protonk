#!/bin/bash

begin() {
  if [ -z "$PROTON" ]
  then
        echo "Please define the environment variable: PROTON. Check README.md"
  else
        echo "This proton will be used: $PROTON"
  fi

  if [ -z "$PROTONK_ONEPREFIX" ]
  then
        export STEAM_COMPAT_DATA_PATH="$PWD"
  else
        export STEAM_COMPAT_DATA_PATH="$PROTONK_ONEPREFIX"
  fi

  export SDL_GAMECONTROLLERCONFIG="03000000de280000ff11000001000000,Steam Virtual Gamepad,a:b0,b:b1,back:b6,dpdown:h0.4,dpleft:h0.8,dpright:h0.2,dpup:h0.1,guide:b8,leftshoulder:b4,leftstick:b9,lefttrigger:a2,leftx:a0,lefty:a1,rightshoulder:b5,rightstick:b10,righttrigger:a5,rightx:a3,righty:a4,start:b7,x:b2,y:b3,03000000de280000fc11000001000000,Steam Controller,a:b0,b:b1,back:b6,dpdown:h0.4,dpleft:h0.8,dpright:h0.2,dpup:h0.1,guide:b8,leftshoulder:b4,leftstick:b9,lefttrigger:a2,leftx:a0,lefty:a1,rightshoulder:b5,rightstick:b10,righttrigger:a5,rightx:a3,righty:a4,start:b7,x:b2,y:b3,030000005e040000a102000007010000,X360 Wireless Controller,a:b0,b:b1,back:b6,dpdown:b14,dpleft:b11,dpright:b12,dpup:b13,guide:b8,leftshoulder:b4,leftstick:b9,lefttrigger:a2,leftx:a0,lefty:a1,rightshoulder:b5,rightstick:b10,righttrigger:a5,rightx:a3,righty:a4,start:b7,x:b2,y:b3,0000000058626f782047616d65706100,XInput Controller,a:b0,b:b1,back:b6,dpdown:h0.4,dpleft:h0.8,dpright:h0.2,dpup:h0.1,guide:b8,leftshoulder:b4,leftstick:b9,lefttrigger:a2,leftx:a0,lefty:a1,rightshoulder:b5,rightstick:b10,righttrigger:a5,rightx:a3,righty:a4,start:b7,x:b2,y:b3,030000005e0400008e02000010010000,X360 Controller,a:b0,b:b1,back:b6,dpdown:h0.4,dpleft:h0.8,dpright:h0.2,dpup:h0.1,guide:b8,leftshoulder:b4,leftstick:b9,lefttrigger:a2,leftx:a0,lefty:a1,rightshoulder:b5,rightstick:b10,righttrigger:a5,rightx:a3,righty:a4,start:b7,x:b2,y:b3,"
  export SDL_GAMECONTROLLER_ALLOW_STEAM_VIRTUAL_GAMEPAD="1"
  export SDL_GAMECONTROLLER_USE_BUTTON_LABELS="1"
  export SDL_VIDEO_X11_DGAMOUSE="0"
  export vblank_mode=0


  base="$(echo "$STEAM_COMPAT_DATA_PATH/pfx/drive_c/Games/"*/)"
}

exportEnvVar(){
  ksettings=$(dirname "$@")
  ksettings="$ksettings/protonk-settings"
  ksettings=$(realpath "$ksettings")

  if [ -f "$ksettings" ]; then
    . "$ksettings"
    echo "Settings found and loaded: $ksettings"
  else
    echo "File protonk-settings not found"
  fi
}

proton() {
  (echo "import sys; __file__ = sys.argv[0] = \"$PROTON\""
   sed 's/, "steam"//g; /"waitforexitandrun"/i \
    elif sys.argv[1] == "exec": \
        g_session.run_proc(sys.argv[2:]) \
' < "$PROTON") | PYTHONPATH="$(dirname "$PROTON")" python3 - "$@"
}

tricks() {
  tricksbin="${WINETRICKS:-$(which winetricks)}"
  [ ! -f "$tricksbin" ] && echo "E: winetricks binary '$tricksbin' not found!" && exit 1
  customtricks="$(mktemp)"
  sed '/w_metadata vcrun2019 dlls/i \
    [ -d ~/.config/tricks ] && for v in ~/.config/tricks/*; do . "$v"; done && \
    echo "loaded custom tricks from ~/.config/tricks";' < "$tricksbin" > "$customtricks"
  chmod +x "$customtricks"
  protonk exec "$customtricks" "$@"
  rm -f "$customtricks"
}

arg="$1"
[ "$arg" ] && shift
case "$arg" in
  run)
    echo "running custom command: $*"
    begin
    exportEnvVar "$@"
    proton run "$@"
    ;;
  exe*)
    echo "execing $*"
    begin
    proton exec "$@"
    ;;
  tricks)
    echo "running winetricks $*"
    begin
    tricks "$@"
    ;;
  *)
    echo "Syntax error. Look in README.md"
  ;;
esac